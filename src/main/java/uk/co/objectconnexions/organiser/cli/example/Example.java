package uk.co.objectconnexions.organiser.cli.example;

import java.time.LocalDateTime;

import uk.co.objectconnexions.organiser.cli.AbstractCommand;
import uk.co.objectconnexions.organiser.cli.CommandSet;
import uk.co.objectconnexions.organiser.cli.CommandContext;
import uk.co.objectconnexions.organiser.cli.Request;
import uk.co.objectconnexions.organiser.cli.Results;
import uk.co.objectconnexions.organiser.cli.app.Cli;
import uk.co.objectconnexions.organiser.cli.command.ApplicationRoot;
import uk.co.objectconnexions.organiser.cli.command.ShowError;

public class Example {

	public static void main(String[] args) {
		
		Cli cli = new Cli(MyApplicationRoot.class, "Organiser, Object Connexions Ltd, 2019");
//		Cli cli = new Cli();
		
		cli.addCommand(MyApplicationRoot.class, new Users());
		
		CommandSet<ApplicationRoot> rootCommands = cli.getRootCommands();
		rootCommands.replaceCommand(new ShowError());	

		rootCommands.addCommand(new AbstractCommand<MyApplicationRoot>("example") {
			@Override
			public void process(CommandContext<MyApplicationRoot> context, Request request, Results result) {
				result.appendLine("this is the result generated by the command with parameters " + request.getAll());
			}
		});
		
		// how we move from one context to another?
		rootCommands.addCommand(new AbstractCommand<MyApplicationRoot>("login", false) {

			@Override
			public void process(CommandContext<MyApplicationRoot> context, Request request, Results result) {
				User user = new User(request.getNextToken());
				context.getTarget().addToUsers(user);
				context.extend(user, user.getName());
				result.appendLine("changed context");
			}
		});

		rootCommands.addCommand(new AbstractCommand<MyApplicationRoot>("user", false) {
			
			@Override
			public boolean appliesTo(CommandContext<?> context, Request request) {
				return !context.getTarget(MyApplicationRoot.class).getUsers().isEmpty();
			}
			
			@Override
			public void process(CommandContext<MyApplicationRoot> context, Request request, Results result) {
				String name = request.getNextToken();
				for (User user : context.getTarget().getUsers()) {
					if (name.equalsIgnoreCase(user.getName())) {
						context.extend(user, user.getName());
						result.appendLine("changed to user");
						return;
					}
				}
				result.appendLine("no such user");
			}
		});

		
		
		CommandSet<User> userCommands = cli.createCommandSet(User.class);
		
		userCommands.addCommand(new AbstractCommand<User>("test") {
			@Override
			public void process(CommandContext<User> context, Request request, Results result) {
				User target = context.getTarget(); //context.getTarget(String.class);
				result.appendLine(target.getUserId() + " logged in with " + target.getName());
			}
		});
		
		userCommands.addCommand(new AbstractCommand<User>("update") {
			@Override
			public void process(CommandContext<User> context, Request request, Results result) {
				User target = context.getTarget();
				target.setName(request.getNextToken());
				result.appendLine("updated name");
			}
		});
		
		userCommands.addCommand(new AbstractCommand<User>("note") {

			@Override
			public boolean isInherited() {
				return false;
			}
			
			@Override
			public void process(CommandContext<User> context, Request request, Results result) {
				User target = context.getTarget();
				Note note = new Note();
				note.setText(request.getRemainderOr("New note"));
				note.setTimeStamp(LocalDateTime.now());
				target.addNote(note);
				context.extend(note, "NOTE");
				result.appendLine("new note");
			}
		});

		userCommands.addCommand(new AbstractCommand<User>("notes") {
			@Override
			public void process(CommandContext<User> context, Request request, Results result) {
				User target = context.getTarget();
				for (Note note : target.getNotes()) {
					result.appendLine(note.getText());
				}
			}
		});
		

		cli.addCommand(Note.class, new AbstractCommand<Note>("show") {
			@Override
			public void process(CommandContext<Note> context, Request request, Results result) {
				Note target = context.getTarget(); //context.getTarget(String.class);
				result.appendLine(target.getTimeStamp() + ": " + target.getText());
			}
		});
		
		
		cli.run();
		//cli.run(new MyApplicationRoot());

	}

}
